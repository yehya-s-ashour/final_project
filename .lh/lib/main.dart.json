{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1693331750297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1693331756990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'package:flutter/material.dart';\r\n \r\n void main() {\r\n-  runApp( MyApp());\r\n+  runApp( Material);\r\n }\r\n \r\n class MyApp extends StatelessWidget {\r\n   const MyApp({super.key});\r\n"
                },
                {
                    "date": 1693331770015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import 'package:flutter/material.dart';\r\n \r\n void main() {\r\n-  runApp( Material);\r\n+  runApp( MaterialApp(\r\n+    home: MY\r\n+  ));\r\n }\r\n \r\n class MyApp extends StatelessWidget {\r\n   const MyApp({super.key});\r\n"
                },
                {
                    "date": 1693331780073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,127 +1,8 @@\n import 'package:flutter/material.dart';\r\n \r\n void main() {\r\n-  runApp( MaterialApp(\r\n-    home: MY\r\n+  runApp(const MaterialApp(\r\n+    home: MyApp(),\r\n   ));\r\n }\r\n-\r\n-class MyApp extends StatelessWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  // This widget is the root of your application.\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return MaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      theme: ThemeData(\r\n-        // This is the theme of your application.\r\n-        //\r\n-        // TRY THIS: Try running your application with \"flutter run\". You'll see\r\n-        // the application has a blue toolbar. Then, without quitting the app,\r\n-        // try changing the seedColor in the colorScheme below to Colors.green\r\n-        // and then invoke \"hot reload\" (save your changes or press the \"hot\r\n-        // reload\" button in a Flutter-supported IDE, or press \"r\" if you used\r\n-        // the command line to start the app).\r\n-        //\r\n-        // Notice that the counter didn't reset back to zero; the application\r\n-        // state is not lost during the reload. To reset the state, use hot\r\n-        // restart instead.\r\n-        //\r\n-        // This works for code too, not just values: Most code changes can be\r\n-        // tested with just a hot reload.\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: const MyHomePage(title: 'Flutter Demo Home Page'),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class MyHomePage extends StatefulWidget {\r\n-  const MyHomePage({super.key, required this.title});\r\n-\r\n-  // This widget is the home page of your application. It is stateful, meaning\r\n-  // that it has a State object (defined below) that contains fields that affect\r\n-  // how it looks.\r\n-\r\n-  // This class is the configuration for the state. It holds the values (in this\r\n-  // case the title) provided by the parent (in this case the App widget) and\r\n-  // used by the build method of the State. Fields in a Widget subclass are\r\n-  // always marked \"final\".\r\n-\r\n-  final String title;\r\n-\r\n-  @override\r\n-  State<MyHomePage> createState() => _MyHomePageState();\r\n-}\r\n-\r\n-class _MyHomePageState extends State<MyHomePage> {\r\n-  int _counter = 0;\r\n-\r\n-  void _incrementCounter() {\r\n-    setState(() {\r\n-      // This call to setState tells the Flutter framework that something has\r\n-      // changed in this State, which causes it to rerun the build method below\r\n-      // so that the display can reflect the updated values. If we changed\r\n-      // _counter without calling setState(), then the build method would not be\r\n-      // called again, and so nothing would appear to happen.\r\n-      _counter++;\r\n-    });\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    // This method is rerun every time setState is called, for instance as done\r\n-    // by the _incrementCounter method above.\r\n-    //\r\n-    // The Flutter framework has been optimized to make rerunning build methods\r\n-    // fast, so that you can just rebuild anything that needs updating rather\r\n-    // than having to individually change instances of widgets.\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        // TRY THIS: Try changing the color here to a specific color (to\r\n-        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar\r\n-        // change color while the other colors stay the same.\r\n-        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\r\n-        // Here we take the value from the MyHomePage object that was created by\r\n-        // the App.build method, and use it to set our appbar title.\r\n-        title: Text(widget.title),\r\n-      ),\r\n-      body: Center(\r\n-        // Center is a layout widget. It takes a single child and positions it\r\n-        // in the middle of the parent.\r\n-        child: Column(\r\n-          // Column is also a layout widget. It takes a list of children and\r\n-          // arranges them vertically. By default, it sizes itself to fit its\r\n-          // children horizontally, and tries to be as tall as its parent.\r\n-          //\r\n-          // Column has various properties to control how it sizes itself and\r\n-          // how it positions its children. Here we use mainAxisAlignment to\r\n-          // center the children vertically; the main axis here is the vertical\r\n-          // axis because Columns are vertical (the cross axis would be\r\n-          // horizontal).\r\n-          //\r\n-          // TRY THIS: Invoke \"debug painting\" (choose the \"Toggle Debug Paint\"\r\n-          // action in the IDE, or press \"p\" in the console), to see the\r\n-          // wireframe for each widget.\r\n-          mainAxisAlignment: MainAxisAlignment.center,\r\n-          children: <Widget>[\r\n-            const Text(\r\n-              'You have pushed the button this many times:',\r\n-            ),\r\n-            Text(\r\n-              '$_counter',\r\n-              style: Theme.of(context).textTheme.headlineMedium,\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-      floatingActionButton: FloatingActionButton(\r\n-        onPressed: _incrementCounter,\r\n-        tooltip: 'Increment',\r\n-        child: const Icon(Icons.add),\r\n-      ), // This trailing comma makes auto-formatting nicer for build methods.\r\n-    );\r\n-  }\r\n-}\r\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1693331786816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import 'package:flutter/material.dart';\r\n \r\n void main() {\r\n   runApp(const MaterialApp(\r\n+    debugShowCheckedModeBanner: false,\r\n     home: MyApp(),\r\n   ));\r\n }\r\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1693331791903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import 'package:flutter/material.dart';\r\n \r\n void main() {\r\n-  runApp(const MaterialApp(\r\n+  runApp(\r\n+    const MaterialApp(\r\n     debugShowCheckedModeBanner: false,\r\n     home: MyApp(),\r\n   ));\r\n }\r\n"
                },
                {
                    "date": 1693331805777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,8 @@\n void main() {\r\n   runApp(\r\n     const MaterialApp(\r\n     debugShowCheckedModeBanner: false,\r\n-    home: MyApp(),\r\n+    home: LoginScreenn(),\r\n   ));\r\n }\r\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1693331842767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import 'package:flutter/material.dart';\r\n \r\n+import 'Screens/login_screen.dart';\r\n+\r\n void main() {\r\n   runApp(\r\n     const MaterialApp(\r\n     debugShowCheckedModeBanner: false,\r\n"
                },
                {
                    "date": 1693335070878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,9 @@\n \r\n import 'Screens/login_screen.dart';\r\n \r\n void main() {\r\n-  runApp(\r\n-    const MaterialApp(\r\n+  runApp(const MaterialApp(\r\n     debugShowCheckedModeBanner: false,\r\n-    home: LoginScreenn(),\r\n+    home: SplashScreen(),\r\n   ));\r\n\\ No newline at end of file\n }\r\n- \n"
                }
            ],
            "date": 1693331750297,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp( MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  // This widget is the root of your application.\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'Flutter Demo',\r\n      theme: ThemeData(\r\n        // This is the theme of your application.\r\n        //\r\n        // TRY THIS: Try running your application with \"flutter run\". You'll see\r\n        // the application has a blue toolbar. Then, without quitting the app,\r\n        // try changing the seedColor in the colorScheme below to Colors.green\r\n        // and then invoke \"hot reload\" (save your changes or press the \"hot\r\n        // reload\" button in a Flutter-supported IDE, or press \"r\" if you used\r\n        // the command line to start the app).\r\n        //\r\n        // Notice that the counter didn't reset back to zero; the application\r\n        // state is not lost during the reload. To reset the state, use hot\r\n        // restart instead.\r\n        //\r\n        // This works for code too, not just values: Most code changes can be\r\n        // tested with just a hot reload.\r\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n        useMaterial3: true,\r\n      ),\r\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\r\n    );\r\n  }\r\n}\r\n\r\nclass MyHomePage extends StatefulWidget {\r\n  const MyHomePage({super.key, required this.title});\r\n\r\n  // This widget is the home page of your application. It is stateful, meaning\r\n  // that it has a State object (defined below) that contains fields that affect\r\n  // how it looks.\r\n\r\n  // This class is the configuration for the state. It holds the values (in this\r\n  // case the title) provided by the parent (in this case the App widget) and\r\n  // used by the build method of the State. Fields in a Widget subclass are\r\n  // always marked \"final\".\r\n\r\n  final String title;\r\n\r\n  @override\r\n  State<MyHomePage> createState() => _MyHomePageState();\r\n}\r\n\r\nclass _MyHomePageState extends State<MyHomePage> {\r\n  int _counter = 0;\r\n\r\n  void _incrementCounter() {\r\n    setState(() {\r\n      // This call to setState tells the Flutter framework that something has\r\n      // changed in this State, which causes it to rerun the build method below\r\n      // so that the display can reflect the updated values. If we changed\r\n      // _counter without calling setState(), then the build method would not be\r\n      // called again, and so nothing would appear to happen.\r\n      _counter++;\r\n    });\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // This method is rerun every time setState is called, for instance as done\r\n    // by the _incrementCounter method above.\r\n    //\r\n    // The Flutter framework has been optimized to make rerunning build methods\r\n    // fast, so that you can just rebuild anything that needs updating rather\r\n    // than having to individually change instances of widgets.\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        // TRY THIS: Try changing the color here to a specific color (to\r\n        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar\r\n        // change color while the other colors stay the same.\r\n        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\r\n        // Here we take the value from the MyHomePage object that was created by\r\n        // the App.build method, and use it to set our appbar title.\r\n        title: Text(widget.title),\r\n      ),\r\n      body: Center(\r\n        // Center is a layout widget. It takes a single child and positions it\r\n        // in the middle of the parent.\r\n        child: Column(\r\n          // Column is also a layout widget. It takes a list of children and\r\n          // arranges them vertically. By default, it sizes itself to fit its\r\n          // children horizontally, and tries to be as tall as its parent.\r\n          //\r\n          // Column has various properties to control how it sizes itself and\r\n          // how it positions its children. Here we use mainAxisAlignment to\r\n          // center the children vertically; the main axis here is the vertical\r\n          // axis because Columns are vertical (the cross axis would be\r\n          // horizontal).\r\n          //\r\n          // TRY THIS: Invoke \"debug painting\" (choose the \"Toggle Debug Paint\"\r\n          // action in the IDE, or press \"p\" in the console), to see the\r\n          // wireframe for each widget.\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: <Widget>[\r\n            const Text(\r\n              'You have pushed the button this many times:',\r\n            ),\r\n            Text(\r\n              '$_counter',\r\n              style: Theme.of(context).textTheme.headlineMedium,\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: _incrementCounter,\r\n        tooltip: 'Increment',\r\n        child: const Icon(Icons.add),\r\n      ), // This trailing comma makes auto-formatting nicer for build methods.\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}